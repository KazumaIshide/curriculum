PHP基本用語
ロジック
　論理、理屈などの意味を持つ。プログラミングでは、処理の流れや手順、プログラムが体現する論理のことをロジックという場合がある。アルゴリズムとほぼ同じ意味で用いられる。ロジックを考える作業を詳細設計や、プログラム設計という。

デバッグ
　コンピュータプログラムに潜む欠陥を探し出して取り出すこと。プログラム上の欠陥、誤りをバグという。その原因やプログラム上での位置を探索・特定し、意図したとおり動作するように修正する作業のことをデバッグという。
　デバッグではまず、バグの探索が行われる。エラーによって別の箇所で致命的なエラーが発生して停止することもあるから。位置が特定されると原因を調べる。単純な誤記から、プログラムの論理やアルゴリズムに誤り、動作環境が原因にない得る。原因が特定されると、修正されるが、外部システムや別の箇所がすでにそのバグが存在する前提で作られてしまっている場合も多くあるため、修正を行わない場合もある。修正によって新たなバグや、潜んでいたバグを顕在化させることがあるため、修正プログラムは入念にテストされる。
　デバッグ作業を支援するソフトウェアをデバッガ（debugger）あるいはデバッグツールという。デバッガは、バグの位置を特定するために、プログラムの動作状況を解析・可視化する機能などを提供する。

開発手法
ウォーターフォール開発
　様々な工程を順番に対応して、剣客的にプロジェクトを進める手法。要件定義から、外部・内部設計、コーディング、テスト、運用までを水の流れのように行う。作りたいシステムが明確な場合に最適。しかし、開発工程を戻すのが難しく、工程の手戻りがあると工程、コストが増える。チャートによりプロジェクトの進捗を管理しやすいため、大規模開発でよく用いられる。

アジャイル開発
　発注者と開発者がコミュニケーションしながらシステム開発をする。開発するシステムを小さく区切り、機能ごとに繰り返し開発していく。発注者が開発途中のシステムを試せるため、隠れたニーズや不満に対応できる。優先度の高いところから開発し、発注者が求めるシステムを効率的に提供できる。
　しかし、計画を立てるのが難しく、開発者が手法になれていない場合が多い。また、プロジェクトの都有で問題がおきたときに対処が難しい。

プロトタイプモデル、スパイラルモデルもある。

アルゴリズム
　ITでは、コンピュータにプログラム形式で与えて実行されることができるよう定式化された、処理手順の集合のこと。この処理は、想定される入力に対して適切な出力を出すために、コンピュータが一意に解釈できるように明解な形になっていなければならない。入力に対してはいつかは必ず出力し、その出力が常に正しい答えであるとき、処理は初めてアルゴリズムと呼ばれる。同じ答えを出すアルゴリズムは一般に、複数存在するが、答えを出すまでの時間がより短く、コンピュータのメモリ使用量がより少ないものほど良い。

フローチャート図
　工程や手順の流れを図式する手法の一つで、個々の段階を箱で表し、それらを順序や論理の推移に従って矢印や線分で結んだもの。It分野では、コンピュータプログラムの設計やアルゴリズムの理解などに、内部で行われる処理や演算の詳細な流れをフローチャートにすることが多い。

主な部品
・開始や終了端子→円、楕円、角丸長方形
・処理→長方形
・サブルーチン、関数などの定義済み処理→左右が二重線の長方形
・出入力→平行四辺形
・条件分岐などの判断→菱形
・繰り返しなどのループ端子→開始は上側、終了は下側の角が欠けた長方形
・ほかの図との出入りを示す結合子→小さな丸
・処理の流れ→線

設計書
外部設計書
　要件定義書に従ってシステムの構成を具体的に設計していくこと。クライアントがわに共有前提の「要件定義書」とは異なり、「基本設計書」（＝外部設計書）はディベロッパーの視点で記述する。外部設計は主に、方針設計、機能設計、その他の設計からなる。
内部設計書
　外部設計では「システム全体の構成」「開発方針の決定」をメインに設計していたが、内部設計では「どのようなモジュールを実装してシステムを構成するか」の一点に注目して設計していく。各モジュールの構成・データフローが主な記述内容。

要件定義
　開発するシステムに求められている機能などの要件をまとめること。RFP（提案依頼書）作成や事前調査などを行って、放蕩に必要な要件を　じっくりと精査していく。ここでまとめた内容を基に開発するため、洗練された要件定義を行うことで、見落としによる仕様変更を減らすことができる。要件定義の結果は要件定義書に書く。

テスト
1．単体テスト：システム開発で、最初に行うテスト。単体テストでは、作成したプログラムを1つずつ単体っでテストして正常に動作するか検証し、個々のモジュールについて機能や性能、運用性をチェックする。
2.結合テスト：単体テストで確認した複数のモジュールを組み合わせて不具合がないか、連結がうまくいくかを検証していく。
3．総合テスト（システムテスト）：プログラムとハードウェアを組み合わせてシステム全体のテストを行う。ハードウェアを実際に動かしながら、通常のバッチ処理、月次処理、四半期処理、年次処理などすべてのサブシステムで想定される処理を一通り実施する。テスト計画は、システムの基本設計の段階からすでにスタートしている。

テスト仕様書
　システムやソフトウェアが、クライアントのヒアリングをもとに作り上げた要件定義書の通りに機能するかどうか、テストするポイントをまとめたドキュメント。
必須項目
1．テストを実施した環境
2．実施するテストの内容
3．テストを実施するためのシステム操作手順
4．テストの実施結果
5．個々のテスト項目を識別するための番号や記号
6．テストを実施した年月日
7．テストを実施した担当者
8．障害報告番号

バリデーション
　検証、認可、妥当性などを示す英単語。ITの分野では、対象がその仕様や文法などに照らして適切に記述・構築されているか否かを検証する。データのバリデーションでは、記述・入力されたデータが、あらかじめ規定された条件や仕様、形式などに適合しているかどうかを検証・確認することを表す。プログラムのバリデーションでは、記述に用いた言語の文法や、そのプログラムに要求される仕様に則り記述されているかを検証することを表す。

ログ
　コンピュータが保有するユーザーの接続時刻や処理内容などを記録したファイル。通常は、ログを参照することで、コンピュータが正常に動作しているかどうかを管理することができる。例えば、Webサーバーの場合には、管理しているサイトに訪問してきたユーザーの情報が格納される。コマンドプロンプトで「eventvwr.msc」と入力する。別ウィンドウでwindowsログ→システムでシステムログを表示できる。

FW（フレームワーク）
アプリケーションフレームワーク：
　アプリケーション開発をするとき、その土台として機能させるソフトウェアのこと。土台となるフレームワークに必要な機能を追加し、アプリケーション開発を進めていくのが一般的。
　
　フレームワークには、Webアプリケーションフレームワーク、データのソートや文字列操作、数学関数、テストなどのアプリケーション機能や性能、操作性を向上させるための「ユーティリティ系フレームワーク」などがある。汎用性が高く、機能が充実しているものから、軽量で機能が絞り込まれたタイプなど多彩にある。
　フレームワークの最大のメリットは、目的のアプリケーションをゼロから開発する必要がないので、開発工程を大幅短縮することができる点。

PHPのFW
・Laravel：PHP初心者でも美しいコードが書ける。分かりやすいだけでなく、すぐに書き始められ、日本語ドキュメント、サポーターによるライブラリも充実している。
・CakePHP：オープンソースのPHPフレームワーク。Ruby on Railsの影響を強く受け、Webアプリケーションを高速に動かせる。
・Symfony：MITライセンスに基づくオープンソースのPHP5用のフレームワーク。機能テストやデバッグのためのツール群が標準装備されていたり、サポートについても明確なルールを持っている。
・Codelgniter：コーディング規制が緩く、自由度が高い、
・ZendFramework：世界的企業が技術支援。拡張性が高く、他のPHPフレームワークほど規約を使わず、各アプリケーションに応じて上書きできる。
・Phalcon：高速に動作
・Slim：オープンソースマイクロフレームワーク。フレームワーク習得のためにコストがあまりかからなことや、シンプルなPHPWebアプリケーション、API開発向きである。
・Yii：高速かつ軽量なオープンソースPHPフレームワーク。高度なWebアプリケーション開発に向いている。
・Flight：シンプル

Ajax
　JavaScriptをつけって非同期通信してあれこれする。
　ホームページを表示するときは、パソコンから、Webサーバーに要求する。するとサーバーから返事が来る。この返事には、ホームページを表示するために必要なhtmlファイルやCSSファイル、画像ファイルやJavaScriptファイルなどがくっついてくる。Webブラウザがこれを表示する。ページを更新する際、Webブラウザがサーバーに通信し、新たなファイルをサーバーからもらう。この時、先ほど表示していた画面の内容は消える。
　しかし、JavaScriptはWebサーバーとやり取りできる。これを非同期通信と呼ぶ。JSを用いると、画面全体を再表示しなくても、表示内容を新しいページ内容に置き換えできる。つまり、Webブラウザ↔Webサーバーのやり取りを、JavaScript↔Webサーバーとできる。このJavaScriptに新しいページをもらってきてもらうのがAjax。「AsynchronousJavaScript+XML」の略（「JavaScriptの非同期通信を使って、XML形式のデータをWebサーバからもらってくる」ということ）。

API
　Application Programing interface、プログラミングするときの他のソフトとの接点。API=機能と窓口のイメージ。WebAPIなら、Webシステムをプログラムから使うための窓口。
　多くのソフトウェアで共通して利用する機能をまとめて提供されていて、そのような汎用的な機能を呼び出して利用するための手続きを定めたものがAPIで、ここの開発者はAPIに従って機能を呼び出す短いコードを記述するだけで機能を持ったソフトウェアを作成できる。

LAMP
　Linux＋Apache＋MySQL＋PHP/Perl/Python。データベースを利用してWebアプリケーションを開発・運用するのに適した、人気の高いオープンソースソフトウェアの組み合わせの一つ。動的なWebサイトやWebサービスなどの構築に適している。

クラウドサーバー、レンタルサーバー、VPSの違い
クラウドサーバー
　クラウド環境に作られたサーバー。1台のサーバーに加速化した専用サーバーを個別に建てる。インタネットのネットワークでの利用を前提とした、クラウドコンピューティング。もちろん、専門会社が管理している物理サーバーは存在している、。これらの機器をインターネット経由で利用できる仕組みで、コルト削減とセキュリティの2つのメリットがある。クラウドサービスにはSaaSとPaaSとlaaSがある。
　スタートアップ大規模サイトや期間限定の用途におすすめ。ECサイトやメディアに使われ、初期費用はほぼ0。料金は月2000円程度が多い。
レンタルサーバー
　1台のサーバーを複数サイトで共有する。サイト運営者は、作成したデータをレンタルしたサーバーにアップロードする。サイトを閲覧する人は、同じレンタルサーバーにアクセスして情報を受け取る。レンタルサーバーには、共用サーバー、専用サーバー、VSP、クラウドサーバーがある。
VPS
　アクセスが比較的安定している、大企業のポータルサイトや官公庁の情報提供サイトに使われる。月1000円程度。VPSでは1台の物理サーバーに仮想的に複数のサーバーを構築する。共用サーバーとは異なり、ホストOSの土台の上にユーザーごとにゲストOSが用意されていて、基本的にこのゲストOS同氏は干渉しない。

AWS
　Amazon Web Serviceで、アマゾンが事業者向けに提供しているクラウドサービス。企業などが情報システムの運用やオンラインサービスの運営のために必要とするItインフラや様々な個別の情報処理機能を、インターネットサービスとして販売している。最も有名なのは、同社のデータセンターで稼働するコンピュータ上に構築された仮想サーバーを遠隔から捜査して好きな用途で使用できる、Amazon EC2。他にもAmazon S3やAmazon RDSなど多くのサービスがある。いずれのサービスも、契約した期間のみ使用できる。
　競合は、GoogleのGCPやMicrosoftのMicrosoft Azure、IBMのIBM cloudなど。

プラットフォーム
　ある機器やソフトウェアを動作させるのに必要な、基盤となる装置やソフトウェア、サービス、あるいはそれらの組み合わせ（動作環境）のことをプラットフォームという。アプリケーションにとっては、OSやミドルウェア、ライブラリ、言語処理系などがプラットフォームであるし、OSにとっては、ハードウェアがプラットフォームとなる。

カバレッジ
　カバーする範囲、カバー率の意。ソフトウェア開発において、出来上がったプログラムのテストをする際、どの程度をテスト対象とする（ことができる）かをカバレッジという。命令全体のうちテストできるものの比率を「ストレートメントカバレッジ」、コード内の分岐のうちテストできるものの比率を「ブランチカバレッジ」、コード内に記述された条件のうちテストできるものの比率を「コンディションカバレッジ」と呼ぶ。

エビデンス
　システム開発のテスト工程において、システムが設計通りに動作していることを示す証拠となるログやデータファイル、画面キャプチャなどの作業証跡を指す。エビデンスは、システムやプログラムが想定した通りの動きをしていることを示す重要なデータであり、また、実施したテストの正当性を示す資料にもなる。

コンパイル
　プログラミング言語で記述されたソースコードを、コンピュータが実行可能な形式に変換する作業のこと。コンパイルによって変換された、コンピュータが実行可能な形式は、オブジェクト・コード（機械語）と呼ばれる。
　コンパイルは通常、ソフトウェア開発において必要。オブジェクト・コードは、コンピュータが理解できる2進数もしくはそれに準じた形式（バイナリ）になっているため、普通は理解できない。コンパイルを行うプログラムをコンパイラという。コンパイラは、ソースコードを解析し、必要があれば外部のライブラリやオブジェクト・コードを使って変換作業を行う。

バッチ処理
　処理したいプログラムをあらかじめ用意し、一括して実行させる方式。企業における、受発注データの集計処理など、一定期間のデータを集めて処理する必要がある場合によく利用される。金融機関などでは、利用者のいない夜間にコンピュータシステムがバッチ処理を行い、まとめて処理する。
　一方、利用者が端末を操作して起動するプログラムを逐一入力していく処理方式をインタラクティブ（対話）処理あるいはリアルタイム処理（実行時処理）という。

デプロイ
　開発したソフトウェアを実際の運用環境に配置・展開して実用に供することを指す。ソフトウェアを構成するプログラムをパッケージにまとめ、使用環境に導入可能な状態に組み立てる工程（ビルト、リリース）、実際の使用環境に展開して導入する工程（インストール）、プログラムを起動して所定の設定や手続きを行い操作や要求を受け付けられる状態にする工程（アクティベート）などを含む。
　FTPは、転送作業を実施する決まり事のこと。実際は、FTPソフトを利用し、FTPサーバーに接続する。
FTPS：クライアントがFTPセッションの暗号化を要求できるようにするFTPの標準拡張。
SFTP：ファイル転送にsecure Shellを用いて、データとコマンドの両方を暗号化し、セキュリティが高い。
TFTP：クライアントがリモートホストからファイルを取得したり、リモートホストにファイルを保存したりすることを可能にする天順なロックステップのFTP。
 
データベース接続クライアント
　データベース管理システム（DBMS）や関係データベース管理システム上のデータを用意に扱うためのソフトウェア。
　ユーザーインターフェースには、SQLを使用するタイプとスプレットシート型がある。代表的なものは、
有料：Oracle、Microsoft SQL server、IBM DB2
無料：MySQL、PostgreSQL、SQLite
 
Gitホスティングサービス
　Gitによるクラウドベースのバージョン管理サービス。
1．GitHub：
　オープンソースのGitホスティングサービスで、パブリックなリポジトリは無制限に作成できる。有料でないとプライベートなリポジトリは使用できないが、ユーザー数、容量制限は特にない。
2．Bitbucket：
　GitとMercurialに対応してホスティングサービス。GitHubとは違い、無料でプライベートリポジトリを持つことができ、リポジトリの制限もない。しかし、コミットユーザー数に制限があり、最大5人まで。それ以上は有料。
3．GitLab：
　GitLabはGitHubをクローンしたサービス。GitLabは、ホスティング版のGitLab.comと、ダウンロード型のGitLabCE、GitLabEEが提供されている。エンタープライズ版のGitLabEE以外は無料。連携可能なサービスが多く、SlackやHipchat、JIRA、Jenkinsなどが使える。

その他CloudForgeやtacpath、Assemblaがある。

チケット管理ツール
　チケット管理とは、実施すべき作業や課題をチケットとして管理する方法。発生日や作業内容、優先度、担当者や期日を登録して管理する。プロジェクト管理では、チケットの発行・処理枚数により、プロジェクト全体の状況を把握する手段として活用される。チケット管理では、タスクの詳細を確認できる。
　代表的なものは、Trelloや、Redmine、Time Krei、Backlogなど。

DBのジョイン
　複数のテーブルを結合させるときにjoinという命令を用いる。大きく分けると、クロス結合、内部結合、外部結合の3種類ある。
　
SEO
　検索エンジン最適化ともいわれる。Webサイト運営者が行うサイト改善策の1つで、Web検索サイトの検索結果のリストの上位に表示させるために様々な工夫を行うこと。企業などは関連する語句が検索された際に少しでも上位に表示されるよう、サイトの構成や掲載内容、外部からのリンク状況などをより好ましい状況に最適化することがある。この一連の施策をSEOという。
内部SEO：検索エンジンに親和性の高いHTMLのコーディングを行い、コンテンツを正しく伝える。
外部SEO：外部生徒からの評価が高くするため、広くリンクを集める。

オブジェクト指向
　互いに密接に関連するデータと手続きをオブジェクトと呼ばれる一つのまとまりとして定義し、様々なオブジェクトを組み合わせて関連性や相互作用を記述していくことによりシステム全体を構築していく手法。オブジェクトにはそれぞれ固有のデータ（属性/プロパティ）と手続き（メソッド）があり、外部からのメッセージを受けてメソッドを実行し、データを操作する。　
