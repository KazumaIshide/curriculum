<?php
echo '要件定義（要求仕様書）<br>
　システム開発を行う上で、「どのようにシステム化するか」、つまり実装すべき機能や満たすべき性能などを明確にしていく作業を決めるのが要件定義。システム開発は、ユーザーの求める要求を要件に落とし込むことから始まる。要求と要件は明確に違う。要求は「やりたいこと」、要件は「やりたいことをどうすれば実現するか」。つまり、要件は解決策まで含んでいる。要件定義を終えるタイミングは、要求に対する解決策が提示され、設計に落とし込むレベルまで文書化されていることになる。<br>
　一般的な開発は、要件定義→設計→製造→テスト　という工程である。要件定義では、<br>
1.	インプットの内容<br>
2.	アウトプットの内容<br>
3.	役割分担<br>
　を明確にする必要がある。<br>

<br>単体テスト（PT）・結合テスト（LT,JT,CT）<br>
　単体テストは、一つ一つのモジュール（プログラムの部品）のテスト。多くの場合、クラスやメソッド、関数。プロシージャなど、言語仕様上他のプログラムから一つのまとまりとして扱われる最小の単位ごとに行われることが多い。すべてのモジュールに単体テストを実施するのは時間や工数、コストがかかるが、問題を早期に発見することができ、後の段階で発見されるよりも容易に修正できることが多い。また、単体テスト完了後は各モジュール単体の動作が正しいことが保証されるため、以降の開発・テスト工程の効率を高めることができる。<br>
　これに対し、複数のモジュールを組み合わせて正しく連結できるかどうかを調べるテストを「結合テスト」インターフェーステスト」などと呼び、システム全体を対象に行うテストを「システムテスト」という。<br>
　結合テストは主に、モジュール間の接続点（インターフェース）がうまく機能するかを確認する場合と、結合した状態で外部から見て一体として正しく機能するかを確認する場合がある。方法は、下位から上位に向かうボトムアップテスト、上位から下位に向かうトップダウンテストがある。<br>

<br>テスト仕様書<br>
　テスト仕様書は、システムやソフトウェアが、クライアントのヒアリングをもとに作り上げた要件定義書の通りに機能するかどうか、テストするポイントをまとめたもの。テスト計画、テスト設計をし、テスト仕様書を作成する。テスト仕様書は、設計書を基にテストケースを起こす。無駄なケースは除き、全体条件を必ず記載する。<br>
　必須項目<br>
1.	テストを実施した環境<br>
2.	実施するテストの内容<br>
3.	テストを実施するためのシステムの操作手順<br>
4.	テストの実施結果<br>
5.	個々のテスト項目を識別するための番号や記号<br>
6.	テストを実施した年月日<br>
7.	テストを実施した担当者<br>
8.	障害報告番号（発生した障害の詳細を開発グループに報告する帳票の識別番号）<br>';
?>